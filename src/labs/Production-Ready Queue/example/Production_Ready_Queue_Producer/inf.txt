Метод assertQueue из библиотеки amqplib. Этот метод используется для проверки 
существования очереди и настройки ее свойств. 
Метод assertQueue принимает два параметра: имя очереди и объект с опциями.
Опция durable установлена в значение true, что означает, что очередь будет
сохраняться при перезапуске брокера.


Метод assertExchange используется для проверки существования обменника (exchange) 
и настройки его свойств. Метод assertExchange принимает три параметра: имя обменника, 
тип обменника и объект с опциями.

Обменник позволяет гибко управлять потоком сообщений в системе. Он определяет, какие сообщения 
будут направлены в какие очереди на основе определенных правил маршрутизации. 
Это позволяет создавать сложные сценарии обработки сообщений, например, маршрутизацию 
сообщений на основе ключей маршрутизации или типов сообщений.

Direct (Прямой): Обменник типа Direct маршрутизирует сообщения в очереди, основываясь на точном
совпадении ключа маршрутизации. Если ключ маршрутизации сообщения совпадает с ключом, указанным
при привязке очереди к обменнику, сообщение будет доставлено в эту очередь.

Fanout (Рассылка): Обменник типа Fanout отправляет копию каждого сообщения во все привязанные очереди.
Этот тип обменника игнорирует ключи маршрутизации и просто рассылает сообщения 
всем подписанным очередям.

Topic (Тематический): Обменник типа Topic позволяет маршрутизировать сообщения на основе шаблонов
ключей маршрутизации. Ключи маршрутизации могут содержать маски, такие как символ * (одиночный символ) 
или символ # (ноль или более символов). Это позволяет гибко настраивать маршрутизацию сообщений
на основе их содержимого.

Headers (Заголовки): Обменник типа Headers использует заголовки сообщений для маршрутизации.
Он игнорирует ключи маршрутизации и основывается на заголовках сообщений для определения,
в какие очереди отправить сообщение.

Метод bindQueue используется для привязки очереди к обменнику. Метод bindQueue принимает три параметра:
имя очереди, имя обменника и ключ маршрутизации.
Метод bindQueue вызывается с переменной retryQueue в качестве имени очереди,
переменной retryExchange в качестве имени обменника и пустой строкой в качестве ключа маршрутизации.
Это означает, что все сообщения, отправленные в обменник retryExchange,
будут привязаны к очереди retryQueue без использования ключа маршрутизации.

В предоставленном коде метод bindQueue вызывается с переменной mainQueue в качестве имени очереди,
переменной deadLetterQueue в качестве имени обменника и пустой строкой в качестве ключа маршрутизации.
Это означает, что все сообщения, отправленные в обменник deadLetterQueue, 
будут привязаны к очереди mainQueue без использования ключа маршрутизации.

Закрытие канала означает, что канал больше не будет принимать или отправлять сообщения. 
Закрытие соединения означает, что связь с брокером сообщений будет разорвана.

RabbitMQ — это популярный open-source брокер сообщений. Он базируется на основе протокола AMQP
(Advanced Message Queuing Protocol) — это открытый протокол для передачи сообщений-событий через 
специальный брокер.

AMQP — это протокол передачи и кадрирования. Под кадрированием подразумевается предоставление 
структуры для потоков двоичных данных, которые передаются в любом направлении в рамках сетевого 
подключения. Структура разграничивает отдельные блоки данных, именуемые кадрами, которые передаются
между сторонами подключения. Возможности передачи предусматривают, что обе взаимодействующие 
стороны могут узнать время передачи и завершения передачи кадров.

RabbitMQ – это брокер сообщений с открытым исходным кодом. Он маршрутизирует собщения по всем 
базовым принципам протокола AMQP описанным в спецификации. Отправитель передает сообщение брокеру
а тот доставляет его получателю. RabbitMQ реализует и дополняет протокол AMQP.

Основная идея модели обмена сообщениями в RabbitMQ заключается в том, что producer (издатель) 
не отправляет сообщения непосредственно в очередь. На самом деле и довольно часто издатель даже
не знает, будет ли сообщение вообще доставлено в какую-либо очередь.


Вместо этого издатель может отправлять сообщения только на обмен. С одной стороны, обмен получает 
сообщения от издателей, а с другой — отправляет их в очереди. Обмен должен точно знать, что делать
с полученным сообщением.



Издатель отправляет сообщение определенному обменнику

Обменник, получив сообщение, маршрутизирует его в одну или несколько очередей в 
соответствии с правилами привязки между ним и очередью

Очередь хранит ссылку на это сообщение. Само сообщение хранится в оперативной памяти или на диске

Как только потребитель готов получить сообщение из очереди, сервер создает копию сообщения
по ссылке и отправляет.

Потребитель получает сообщение и отправляет брокеру подтверждение

Брокер, получив подтверждение, удаляет копию сообщения из очереди.

Затем удаляет из оперативной памяти и с диска
